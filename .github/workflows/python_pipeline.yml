name: Release Python Package

on:
  workflow_call:
    secrets:
      PYPI_API_TOKEN:
        required: true
      DOCKER_REGISTRY:
        required: false
      DOCKER_USERNAME:
        required: false
      DOCKER_PASSWORD:
        required: false
      DOCKER_REPOSITORY:
        required: false

jobs:
  publish:
    runs-on: self-hosted
    permissions: write-all
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Verify Latest Build Version
        id: verify_version
        env:
          REPO_NAME: ${{ github.event.repository.name }}
        run: |
          # Function to compare version numbers numerically
          version_compare() {
            if [[ $1 == $2 ]]; then
              return $1  # Equal
            fi
            # Use sort -V to compare versions and determine order
            lower=$(echo -e "$1\n$2" | sort -V | head -n1)
            if [[ $lower == $1 ]]; then
              return $2  # $1 < $2
            else
              return $1  # $1 > $2
            fi
          }
          
          echo "Fetching Latest Tags"
          git fetch --tags  
          echo "Repository Name: ${REPO_NAME}"
          echo "Current Version: ${CURRENT_VERSION}"
          TAG=$(git tag -l | sort -V | tail -n1)
          echo "Tag: ${TAG}"
          LATEST_COMMIT=$(git rev-parse --verify HEAD)
          echo "Last Commit: ${LATEST_COMMIT}"
          if [[ $TAG != '' ]]; then          
            CURRENT_COMMIT=$(git rev-list -n 1 $TAG)                    
            CURRENT_RELEASE=$(git tag -l | sort -V | tail -n1 | sed 's/v//')   
          else
            TAG=''
            CURRENT_COMMIT=${LATEST_COMMIT}
            CURRENT_RELEASE="0.0.0"  # Default for no tags
          fi
          COMMIT_DIFFERENCE=$(git log ${CURRENT_COMMIT}..${LATEST_COMMIT} --pretty=oneline | wc -l)
          echo "Commit Difference: ${COMMIT_DIFFERENCE}"
          COMMIT_MESSAGE=$(git log --format=%B -n $COMMIT_DIFFERENCE $LATEST_COMMIT | tr '\n' ' ')
          COMMIT_DATETIME=$(date "+%m/%d/%Y %H:%M:%S") 
          echo "Determining version increment needed..."
          # Determine if version increment is needed
          NEEDS_INCREMENT="true"
          echo -e "COMMIT_DATETIME=$COMMIT_DATETIME\nTAG=$TAG\nREPO_NAME=$REPO_NAME\nFOLDER_NAME=$FOLDER_NAME\nCURRENT_RELEASE=$CURRENT_RELEASE\nCURRENT_VERSION=$CURRENT_VERSION\nLATEST_COMMIT=$LATEST_COMMIT\nCURRENT_COMMIT=$CURRENT_COMMIT\nCOMMIT_DIFFERENCE=$COMMIT_DIFFERENCE\nCOMMIT_MESSAGE=$COMMIT_MESSAGE\nNEEDS_INCREMENT=$NEEDS_INCREMENT" | tee -a $GITHUB_ENV

      - name: Increment Version
        if: ${{ env.NEEDS_INCREMENT == 'true' }}
        id: increment_version
        run: |
          export PATH=$PATH:~/.local/bin
          python -m pip install --upgrade autoversioner
          autoversioner -v "${CURRENT_VERSION}" | tee -a VERSION
          COMMIT_MESSAGE=$(echo "${{ github.event.head_commit.message }}" | tr -d '\n')
          echo "Commit Message: $COMMIT_MESSAGE"
          NEW_VERSION="$(cat VERSION)"
          rm -rf ./VERSION
          echo -e "Old Version: $CURRENT_RELEASE\nNew Version: $NEW_VERSION"
          sed -i "s/CURRENT_VERSION=.*$/CURRENT_VERSION=$NEW_VERSION/" $GITHUB_ENV
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV

      #      - name: Log in to Docker registry
      #        if: ${{ env.NEEDS_INCREMENT == 'true' && hashFiles('Dockerfile') != '' }}
      #        uses: docker/login-action@v3
      #        with:
      #          registry: ${{ secrets.DOCKER_REGISTRY }}
      #          username: ${{ secrets.DOCKER_USERNAME }}
      #          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata for Docker
        if: ${{ env.NEEDS_INCREMENT == 'true' && hashFiles('Dockerfile') != '' }}
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.DOCKER_REGISTRY }}/${{ secrets.DOCKER_REPOSITORY }}
          tags: |
            type=raw,value=${{ env.BUILD_VERSION }}
            type=sha
            type=raw,value=latest,enable=${{ github.ref == 'refs/heads/main' }}

      - name: Build package
        if: ${{ env.NEEDS_INCREMENT == 'true' }}
        id: build_package
        run: |
          echo "Installing dependencies"
          python -m pip install -r requirements.txt
          echo "Building package"
          python setup.py bdist_wheel --universal
          BUILD_VERSION=$(ls dist | grep -o '[0-9][0-9]*\.[0-9][0-9]*\.[0-9][0-9]*')
          echo "BUILD VERSION: $BUILD_VERSION"
          echo -e "BUILD_VERSION=$BUILD_VERSION" | tee -a $GITHUB_ENV

      - name: Upload Artifact
        if: ${{ env.NEEDS_INCREMENT == 'true' }}
        id: upload_artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ github.event.repository.name }}-${{ env.VERSION }}
          path: dist/${{ github.event.repository.name }}*.whl

      - name: Publish package
        if: ${{ env.NEEDS_INCREMENT == 'true' }}
        run: |
          twine upload dist/* --verbose -u "__token__" -p "${{ secrets.PYPI_API_TOKEN }}"

      - name: Build and push Docker image
        if: ${{ env.NEEDS_INCREMENT == 'true' && hashFiles('Dockerfile') != '' }}
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Create Release
        if: ${{ env.NEEDS_INCREMENT == 'true' }}
        id: create_release
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ env.BUILD_VERSION }}
          release_name: Release v${{ env.BUILD_VERSION }}
          body: |
            Released: ${{ env.COMMIT_DATETIME }}
            Commit: ${{ env.LATEST_COMMIT }}
            Changes: 
            ${{ env.COMMIT_MESSAGE }}
          draft: false
          prerelease: false