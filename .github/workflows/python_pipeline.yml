name: Release Python Package

on:
  workflow_call:
    secrets:
      PYPI_API_TOKEN:
        required: true
      DOCKER_REGISTRY:
        required: false
      DOCKER_USERNAME:
        required: false
      DOCKER_PASSWORD:
        required: false
      DOCKER_REPOSITORY:
        required: false

jobs:
  publish:
    runs-on: self-hosted
    permissions: write-all
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Build package
        id: build_package
        run: |
          echo "Installing dependencies"
          python -m pip install -r requirements.txt --no-warn-script-location
          echo "Building package"
          python -m build
          BUILD_VERSION=$(ls dist | grep -o '[0-9][0-9]*\.[0-9][0-9]*\.[0-9][0-9]*' | head -n 1)
          LATEST_COMMIT=$(git rev-parse --verify HEAD)
          echo "Last Commit: ${LATEST_COMMIT}"
          if [[ $TAG != '' ]]; then          
            CURRENT_COMMIT=$(git rev-list -n 1 $TAG)                    
            CURRENT_RELEASE=$(git tag -l | sort -V | tail -n1 | sed 's/v//')   
          else
            TAG=''
            CURRENT_COMMIT=${LATEST_COMMIT}
            CURRENT_RELEASE="0.0.0"  # Default for no tags
          fi
          COMMIT_DIFFERENCE=$(git log ${CURRENT_COMMIT}..${LATEST_COMMIT} --pretty=oneline | wc -l)
          COMMIT_MESSAGE=$(git log --format=%B -n $COMMIT_DIFFERENCE $LATEST_COMMIT | tr '\n' ' ')
          COMMIT_DATETIME=$(date "+%m/%d/%Y %H:%M:%S") 
          echo -e "COMMIT_DATETIME=$COMMIT_DATETIME\nCOMMIT_MESSAGE=$COMMIT_MESSAGE\nBUILD_VERSION=$BUILD_VERSION" | tee -a $GITHUB_ENV

      - name: Upload Artifact
        id: upload_artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ github.event.repository.name }}-${{ env.BUILD_VERSION }}
          path: dist/*.whl
          if-no-files-found: error

      - name: Publish package
        run: |
          twine upload dist/* --verbose -u "__token__" -p "${{ secrets.PYPI_API_TOKEN }}"

      - name: Build and push Docker image
        if: ${{ hashFiles('Dockerfile') != '' }}
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ env.BUILD_VERSION }}
          name: Release v${{ env.BUILD_VERSION }}
          body: |
            Released: ${{ env.COMMIT_DATETIME }}
            Commit: ${{ env.LATEST_COMMIT }}
            Changes: 
            ${{ env.COMMIT_MESSAGE }}
          draft: false
          prerelease: false